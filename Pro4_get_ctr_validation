# -*- coding: utf-8 -*-
"""
Created on Thu Feb 28 21:51:54 2019

@author: 白开心
"""
#%%
import numpy as np
import pandas as pd
import seaborn as sb
import sklearn
import re
import os

from pandas import Series, DataFrame
from pylab import rcParams
from sklearn import preprocessing
from sklearn.linear_model import LogisticRegression
# from sklearn.cross_validation import train_test_split
from sklearn import metrics 
from sklearn.metrics import classification_report

#%matplotlib inline
rcParams['figure.figsize'] = 10, 8
sb.set_style('whitegrid')
#%%
train_file = pd.read_csv('data/train.csv') # train.csv
#%% negative down sampling
def neg_sampling (df, w):
    df_click = df[df['click'] == 1]
    df_noclick = df[df['click'] == 0]
    df_noclick_sample = df_noclick.sample(frac = w, axis = 0)  # random_state = int
    df_sample = df_click.append(df_noclick_sample).reset_index(drop = True)
    return df_sample
frac = 0.15
train = neg_sampling(train_file, frac)
#get the training data for click and payment
train_for_bidding_test = train.copy()
train_for_bidding_test = train_for_bidding_test[['click', 'payprice']].astype(float)
#%% drop irrelevant variables
train = train.drop(['bidid','userid','IP','domain','url','urlid','slotid','bidprice','payprice','keypage'], 1)
train_label = train['click']
train = train.drop(['click'], 1)
train.head()

#%% check if target variable is binary
train_label.value_counts()
#%% check for missing values
train.isnull().sum()
#%% conver numerical data into categories
sorted(train['slotwidth'].unique())
bin = [-1,200,400,600,800,max(train['slotwidth'])]
slotwidth = pd.cut(train['slotwidth'],bin)
slotwidth = slotwidth.to_frame()

sorted(train['slotheight'].unique())
bin = [-1,100,200,300,400,500,max(train['slotwidth'])]
slotheight = pd.cut(train['slotheight'],bin)
slotheight = slotheight.to_frame()

sorted(train['slotprice'].unique())
bin = [-1,50,100,150,200,250,max(train['slotprice'])]
slotprice = pd.cut(train['slotprice'],bin)
slotprice = slotprice.to_frame()

train = train.drop(['slotwidth','slotheight','slotprice'], 1)
train = pd.concat([train,slotwidth,slotheight,slotprice],axis = 1)

#%% clean 'usertag'
usertag = train['usertag'].astype(str)
for index in range(0,len(usertag)):
    if usertag[index] != 'null':
        usertag[index] = int(re.sub(',', '', usertag[index]))
        if usertag[index] > 100000000000000000000:
            usertag[index] = 'ut0'
train = train.drop(['usertag'], 1)
train = pd.concat([train,usertag],axis = 1)

#%% convert numerical data into str
num_cat = ['weekday','hour','region','city','adexchange','advertiser']
for var in num_cat:
    train[var] = train[var].apply(str)
#train.dtypes

#%%
validation = pd.read_csv('data/validation.csv') # validation.csv
# #get the validation data for click and payment
validation_for_bidding_test = validation.copy()
validation_for_bidding_test = validation_for_bidding_test[['click', 'payprice']].astype(float)
#
validation = validation.drop(['bidid','userid','IP','domain','url','urlid','slotid','bidprice','payprice','keypage'], 1)
validation_label = validation['click']
validation = validation.drop(['click'], 1)
#
bin = [-1,200,400,600,800,max(validation['slotwidth'])]
slotwidth = pd.cut(validation['slotwidth'],bin)
slotwidth = slotwidth.to_frame()
bin = [-1,100,200,300,400,500,max(validation['slotwidth'])]
slotheight = pd.cut(validation['slotheight'],bin)
slotheight = slotheight.to_frame()
bin = [-1,50,100,150,200,250,max(validation['slotprice'])]
slotprice = pd.cut(validation['slotprice'],bin)
slotprice = slotprice.to_frame()
validation = validation.drop(['slotwidth','slotheight','slotprice'], 1)
validation = pd.concat([validation,slotwidth,slotheight,slotprice],axis = 1)
#
usertag = validation['usertag'].astype(str)
for index in range(0,len(usertag)):
    if usertag[index] != 'null':
        usertag[index] = int(re.sub(',', '', usertag[index]))
        if usertag[index] > 100000000000000000000:
            usertag[index] = 'ut0'
validation = validation.drop(['usertag'], 1)
validation = pd.concat([validation,usertag],axis = 1)
#
num_cat = ['weekday','hour','region','city','adexchange','advertiser']
for var in num_cat:
    validation[var] = validation[var].apply(str)
#%% convert into one-hot, train LR model
train_size = train.shape[0]
train_validation_together = pd.concat([train, validation],axis=0)
del train
del validation
together_oh = pd.get_dummies(train_validation_together, dummy_na=True)
del train_validation_together
train_oh = np.array(together_oh)[:train_size, :]
validation_oh = np.array(together_oh)[train_size:, :]
del together_oh
del slotheight
del slotprice
del slotwidth
del usertag
LogReg = LogisticRegression()
LogReg.fit(train_oh, train_label)


#%%
#pred_ctr_1 = LogReg.predict(validation_oh)
#pred_ctr_2 = frac/(frac-1+1/(pred_ctr_1 + 1e-10))

def bid_non_linear_1(theta, c, lambda_c):
    # theta: the predicted CTR
    # c, lambda_c: hyperparameters of bid functions
    return np.sqrt((c * theta / lambda_c) + (c ** 2)) - c

def bid_non_linear_2(theta, c, lambda_c):
    # theta: the predicted CTR
    # c, lambda_c: hyperparameters of bid functions
    part1 = (theta + np.sqrt((c ** 2) * (lambda_c ** 2) + (theta ** 2))) / (c * lambda_c)
    part2 = (c * lambda_c) / (theta + np.sqrt((c ** 2) * (lambda_c ** 2) + (theta ** 2)))
    return c * (part1 ** (1/3) - part2 ** (1/3))

del train_oh
del train_label

theta_ctr_validation = LogReg.predict_proba(validation_oh)
del validation_oh
theta_ctr_validation = theta_ctr_test[:, 1]
theta_ctr_validation = frac/(frac-1+1/(theta_ctr_validation))
np.savetxt('validation_ctr.csv', theta_ctr_validation)
del theta_ctr_validation
